{"version":3,"sources":["components/Form/Form.jsx","components/Form/index.js","helpers/convertDate.js","components/Row/index.js","components/Row/Row.jsx","components/Table/index.js","components/Table/Table.jsx","helpers/findCountry.js","App.js","reportWebVitals.js","index.js"],"names":["StyledForm","styled","form","Row","div","Actions","Form","getFlightData","useState","date","month","String","getMonth","padStart","day","getDate","year","getFullYear","convertDate","Date","departureDate","setDepartureDate","from","setFrom","to","setTo","currency","setCurrency","onSubmit","e","preventDefault","TextField","label","value","onChange","target","type","defaultValue","FormControl","InputLabel","shrink","Select","MenuItem","Button","onClick","variant","color","carrier","currencies","quotes","places","CarrierId","Name","Symbol","flightData","filter","quote","OutboundLeg","CarrierIds","TableRow","TableCell","replace","map","MinPrice","join","Table","Carriers","Currencies","Quotes","Places","TableContainer","component","Paper","aria-label","TableHead","TableBody","item","findCountry","countryName","url","a","storedCountriesString","localStorage","getItem","storedCountries","JSON","parse","storedCountry","find","results","fetch","headers","then","data","json","catch","alert","length","some","CountryName","push","setItem","stringify","lang","getCountryUrl","App","setFlightData","findCountryFrom","storedResults","findCountryTo","options","fromCountry","toCountry","PlaceId","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed243661.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { convertDate } from \"../../helpers/convertDate\";\n\nconst StyledForm = styled.form`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 50px;\n\n    & > *.MuiFormControl-root {\n        min-width: 47%;\n    }\n`;\n\nconst Actions = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-bottom: 50px;\n`;\n\nexport const Form = ({ getFlightData }) => {\n    const [departureDate, setDepartureDate] = useState(convertDate(new Date()));\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [currency, setCurrency] = useState(\"PLN\");\n    const onSubmit = () => getFlightData({ departureDate, from, to, currency });\n\n    return <>\n        <StyledForm onSubmit={e => e.preventDefault()}>\n            <Row>\n                <TextField label=\"From\" value={from} onChange={(e) => setFrom(e.target.value)} />\n                <TextField label=\"To\" value={to} onChange={(e) => setTo(e.target.value)} />\n            </Row>\n            <Row>\n                <TextField\n                    type=\"date\"\n                    label=\"Departure Date\"\n                    defaultValue={departureDate}\n                    onChange={(date) => setDepartureDate(date.target.value)}\n                />\n                <FormControl>\n                    <InputLabel shrink>\n                        Currency\n                    </InputLabel>\n                    <Select\n                        value={currency}\n                        onChange={(e) => setCurrency(e.target.value)}\n                    >\n                        <MenuItem value=\"PLN\">PLN</MenuItem>\n                        <MenuItem value=\"EUR\">EUR</MenuItem>\n                        <MenuItem value=\"USD\">USD</MenuItem>\n                        <MenuItem value=\"UAH\">UAH</MenuItem>\n                    </Select>\n                </FormControl>\n            </Row>\n        </StyledForm>\n        <Actions>\n            <Button onClick={onSubmit} variant=\"contained\" color=\"primary\">\n                Find\n            </Button>\n        </Actions>\n    </>\n}","import { Form } from \"./Form\";\n\nexport default Form;","export const convertDate = (date) => {\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const year = date.getFullYear();\n\n    return `${year}-${month}-${day}`;\n}","import { Row } from \"./Row\";\n\nexport default Row;","import TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport const Row = ({ carrier, currencies, quotes, places }) => {\n    const { CarrierId, Name } = carrier;\n    const currency = currencies[0].Symbol;\n    const flightData = quotes.filter(quote => quote.OutboundLeg.CarrierIds[0] === CarrierId);\n\n    return <TableRow>\n        <TableCell>{Name} ({places.from.replace(\"-sky\", \"\")}/{places.to.replace(\"-sky\", \"\")})</TableCell>\n        <TableCell>{flightData.map(({ MinPrice }) => MinPrice).join(\", \")} {currency}</TableCell>\n    </TableRow>\n}","import { Table } from \"./Table\";\n\nexport default Table;","import MuiTable from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Row from \"../Row\";\n\nexport const Table = ({ flightData }) => {\n    const { Carriers, Currencies, Quotes, Places } = flightData;\n\n    return Carriers ? (<TableContainer component={Paper}>\n        <MuiTable aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Price</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    Carriers.map(item =>\n                        <Row\n                            key={item.CarrierId}\n                            currencies={Currencies}\n                            carrier={item}\n                            quotes={Quotes}\n                            places={Places}\n                        />\n                    )\n                }\n            </TableBody>\n        </MuiTable>\n    </TableContainer>) : null\n}","export const findCountry = async (countryName, url) => {\n    const storedCountriesString = localStorage.getItem(\"countries\");\n    const storedCountries = storedCountriesString ? JSON.parse(storedCountriesString) : [];\n    const storedCountry = storedCountries.find(item => item.countryName === countryName);\n\n    if (storedCountry) {\n        return storedCountry.results;\n    }\n\n    const results = await fetch(`${url}${countryName}`, {\n        headers: {\n            \"x-rapidapi-key\": \"c37641f051mshe682881ca808e3ep1b0ba1jsne813ccecdbfb\",\n            \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n            \"useQueryString\": true\n        },\n    }).then(data => data.json()).then(({ Places }) => Places).catch(() => {\n        alert(\"No such country\");\n        return [];\n    });\n\n    if (results.length) {\n        if (!storedCountries.some(item => item.CountryName === countryName)) {\n            storedCountries.push({ countryName, results });\n            localStorage.setItem(\n                \"countries\",\n                JSON.stringify(storedCountries)\n            )\n        }\n    }\n\n    return results;\n}","import { useState } from 'react';\nimport Form from \"./components/Form\";\nimport Table from \"./components/Table\";\nimport { findCountry } from \"./helpers/findCountry\";\nimport './App.css';\n\nconst lang = \"en-US\";\nconst marketCountry = \"UA\";\n\nconst getCountryUrl = (currency) =>\n    `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/${marketCountry}/${currency}/${lang}/?query=`;\n\nconst App = () => {\n    const [flightData, setFlightData] = useState({});\n\n    const findCountryFrom = async (from, currency) => {\n        if (!from || !currency) {\n            return;\n        }\n\n        const storedResults = await findCountry(from, getCountryUrl(currency));\n\n        return storedResults?.[0];\n    }\n\n    const findCountryTo = async (to, currency) => {\n        if (!to || !currency) {\n            return;\n        }\n\n        const storedResults = await findCountry(to, getCountryUrl(currency));\n\n        return storedResults?.[0];\n    }\n\n    const getFlightData = async (options) => {\n        const { departureDate, from, to, currency } = options;\n\n        const fromCountry = await findCountryFrom(from, currency);\n        const toCountry = await findCountryTo(to, currency);\n\n        if (!departureDate || !fromCountry || !toCountry || !currency) {\n            return;\n        }\n\n        fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/${marketCountry}/${currency}/${lang}/${fromCountry?.PlaceId}/${toCountry?.PlaceId}/${departureDate}`, {\n            headers: {\n                \"x-rapidapi-key\": \"ab45838c7cmsh9ac1edb62d199a4p1e3ca7jsnc9b68cdbfc9f\",\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n                \"useQueryString\": true\n            },\n        }).then(data => data.json()).then(data =>\n            setFlightData({...data, Places: { from: fromCountry.PlaceId, to: toCountry.PlaceId }}));\n    };\n\n    return (\n        <div className=\"app\">\n            <Form getFlightData={getFlightData} />\n            <Table flightData={flightData}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}